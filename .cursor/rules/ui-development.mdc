---
globs: Utils/UI/**/*.cs,Features/*View.cs,Features/*Panel.cs
description: UI development guidelines using mod UI framework
---
# UI 开发指南

## UI 框架结构

使用 [Utils/UI/](mdc:Utils/UI) 提供的组件系统来创建模组界面。

### 核心组件

#### 面板
- [Utils/UI/Core/ModPanel.cs](mdc:Utils/UI/Core/ModPanel.cs) - 基础面板类

#### 构建器
- [Utils/UI/Builders/SettingsBuilder.cs](mdc:Utils/UI/Builders/SettingsBuilder.cs) - 设置 UI 构建器

#### UI 组件
- [Utils/UI/Components/ModButton.cs](mdc:Utils/UI/Components/ModButton.cs) - 按钮组件
- [Utils/UI/Components/ModToggle.cs](mdc:Utils/UI/Components/ModToggle.cs) - 开关组件
- [Utils/UI/Components/ModSlider.cs](mdc:Utils/UI/Components/ModSlider.cs) - 滑块组件
- [Utils/UI/Components/ModKeybindingButton.cs](mdc:Utils/UI/Components/ModKeybindingButton.cs) - 按键绑定组件
- [Utils/UI/Components/PieMenuComponent.cs](mdc:Utils/UI/Components/PieMenuComponent.cs) - 径向菜单组件
- [Utils/UI/Components/SettingsItems/](mdc:Utils/UI/Components/SettingsItems/) - 设置项组件集合
  - BaseSettingsItem - 基类
  - BoolSettingsItem - 布尔开关
  - RangedFloatSettingsItem - 范围滑块
  - IndexedOptionsSettingsItem - 选项列表
  - KeyCodeSettingsItem - 按键绑定
  - SectionHeaderItem - 分节标题
  - SpacerItem - 空白间隔

#### 常量和样式
- [Utils/UI/Constants/UIConstants.cs](mdc:Utils/UI/Constants/UIConstants.cs) - UI 常量
- [Utils/UI/Constants/UIStyles.cs](mdc:Utils/UI/Constants/UIStyles.cs) - 样式定义

#### 动画
- [Utils/UI/Animations/ModAnimations.cs](mdc:Utils/UI/Animations/ModAnimations.cs) - UI 动画

## 创建新 UI 面板

### 1. 基本面板结构

```csharp
using UnityEngine;
using UnityEngine.UI;
using EfDEnhanced.Utils.UI.Core;
using EfDEnhanced.Utils.UI.Components;

public class MyCustomPanel : ModPanel
{
    protected override void SetupPanel()
    {
        // 设置面板属性
        PanelWidth = 800f;
        PanelHeight = 600f;
        
        // 创建 UI 元素
        CreateContent();
    }
    
    private void CreateContent()
    {
        // 使用组件创建 UI
    }
}
```

### 2. 使用设置构建器创建设置 UI

```csharp
using EfDEnhanced.Utils.UI.Builders;
using EfDEnhanced.Utils.Settings;

var settingsBuilder = new SettingsBuilder(parentTransform);
settingsBuilder
    .AddSection("Settings_Category_General")
    .AddSetting(ModSettings.EnableFeature)    // BoolSettingsEntry → BoolSettingsItem
    .AddSetting(ModSettings.IntensityLevel)   // RangedFloatSettingsEntry → RangedFloatSettingsItem
    .AddSetting(ModSettings.MenuHotkey)       // KeyCodeSettingsEntry → KeyCodeSettingsItem
    .AddButton("Settings_ApplyButton", OnApplyClicked);
```

**说明**:
- `SettingsBuilder` 自动根据设置条目类型生成对应的 UI 组件
- 每个 `ISettingsEntry` 会自动对应到合适的 SettingsItem 组件
- 支持条件可见性和左内缩进参数

### 3. 使用独立组件

```csharp
using EfDEnhanced.Utils.UI.Components;

// 创建按钮
var button = ModButton.Create(parentTransform)
    .SetText("按钮文本")
    .OnClick(() => { /* 点击回调 */ });

// 创建 Toggle（需要通过 SettingsBuilder 或手动创建）
var toggle = ModToggle.Create(parentTransform)
    .SetLabel("标签")
    .OnValueChanged(value => { /* 值变化回调 */ });

// 创建滑块
var slider = ModSlider.Create(parentTransform)
    .SetLabel("强度")
    .SetRange(0f, 100f)
    .OnValueChanged(value => { /* 值变化回调 */ });

// 创建按键绑定按钮
var keybinding = ModKeybindingButton.Create(parentTransform, ModSettings.OpenMenuHotkey);
```

### 4. 按键绑定组件

```csharp
using EfDEnhanced.Utils.UI.Components;
using EfDEnhanced.Utils.Settings;

// 创建按键绑定按钮
ModKeybindingButton keybindingButton = ModKeybindingButton.Create(
    parentTransform,
    settingsEntry  // KeyCodeSettingsEntry
);
```

**按键绑定按钮特性**:
- 点击按钮后进入监听模式，显示本地化的 "Press Any Key..." 提示
- 按下任意键即可绑定（自动验证并排除保留按键）
- 按 ESC 取消绑定操作，恢复原值
- 自动显示友好的按键名称（如 "Space"、"F1"、"Num 5"、"↑" 等）
- 监听设置变更事件，实时更新显示
- 与游戏原生按键绑定UI风格一致

**按键显示名称映射**:
- 数字键: `Alpha0` → "0", `Keypad5` → "Num 5"
- 方向键: `UpArrow` → "↑", `DownArrow` → "↓"
- 功能键: `F1` → "F1", `Space` → "Space"
- 修饰键: `LeftShift` → "L-Shift", `LeftControl` → "L-Ctrl"
- 手柄按键: `JoystickButton0` → "A (Gamepad)", `JoystickButton4` → "LB (Gamepad)"

**验证与排除**:
- 自动排除鼠标左右键（Mouse0/Mouse1）
- 自动排除 None 和无效按键
- 允许鼠标中键/侧键（Mouse2-Mouse6）
- **允许手柄按键**（JoystickButton0-19，Xbox/PlayStation 等手柄）
```

## UI 样式

使用 [Utils/UI/Constants/UIStyles.cs](mdc:Utils/UI/Constants/UIStyles.cs) 中定义的统一样式：

```csharp
using EfDEnhanced.Utils.UI.Constants;

// 应用标准按钮样式
UIStyles.ApplyButtonStyle(buttonComponent);

// 使用标准颜色
var backgroundColor = UIStyles.BackgroundColor;
var accentColor = UIStyles.AccentColor;
```

## UI 动画

使用 [Utils/UI/Animations/ModAnimations.cs](mdc:Utils/UI/Animations/ModAnimations.cs) 添加动画效果：

```csharp
using EfDEnhanced.Utils.UI.Animations;

// 淡入动画
ModAnimations.FadeIn(canvasGroup, duration: 0.3f);

// 淡出动画
ModAnimations.FadeOut(canvasGroup, duration: 0.3f);

// 缩放动画
ModAnimations.ScalePopIn(transform, duration: 0.2f);
```

## 布局最佳实践

1. **使用 Unity Layout Components**
   - `VerticalLayoutGroup` - 垂直布局
   - `HorizontalLayoutGroup` - 水平布局
   - `GridLayoutGroup` - 网格布局

2. **响应式设计**
   - 使用 `ContentSizeFitter` 自适应内容
   - 使用 `LayoutElement` 控制最小/最大尺寸

3. **锚点设置**
   - 正确设置 RectTransform 锚点确保适配不同分辨率

## 现有 UI 参考

- [Features/ModSettingsContent.cs](mdc:Features/ModSettingsContent.cs) - 设置面板示例
- [Features/ActiveQuestTracker.cs](mdc:Features/ActiveQuestTracker.cs) - 游戏内覆盖 UI
- [Features/RaidPreparationView.cs](mdc:Features/RaidPreparationView.cs) - 复杂表单界面

## 注入现有 UI

查看 [Patches/OptionsPanelPatch.cs](mdc:Patches/OptionsPanelPatch.cs) 了解如何将模组设置注入游戏原有界面。
